#! /bin/sh

# Set up /opt/iains/<build>/gcc-build/{bin,scripts}

scripts=`dirname $0`

oss_source=$scripts/archs

print_help()
{
  echo "`basename $0` [options]"
  echo "options:"
  echo " --prefix    : specify the prefix"
  echo " --compiler  : specify the compiler"
  echo " --arch      : specify a different arch from the kernel"
  echo " --jobs/-j   : number of jobs for make and check."
  echo " --force/-f  : continue on non-fatal error."
  echo " --help/-h   : this output."
}

arch=
prefix=
num_jobs=
compiler=
goon=1
while [ $goon -eq 1 -a $# -gt 0 ]
do
  case $1 in
    --help | -h)
      print_help
      exit 0
      ;;
    --prefix)
      prefix=$2
      shift; shift
      ;;
    --compiler)
      compiler=$2
      shift; shift
      ;;
    --arch)
      arch=$2
      shift; shift
      if [ $arch = "arm64" ]; then
        arch="aarch64"
      fi
      ;;
    -j | --jobs)
      num_jobs=$2
      shift; shift
      ;;
    *)
      goon=0
      ;;
  esac
done

. $scripts/build-utils
. $scripts/build-texinfo
. $scripts/build-tcl
. $scripts/build-darwin-expect
. $scripts/build-dejagnu
. $scripts/build-libiconv
. $scripts/build-libunistring
. $scripts/build-gettext
. $scripts/build-gnu-m4-1-4-19
. $scripts/build-autoconf-2-69
. $scripts/build-automake-1-15-1
. $scripts/build-gperf-3-1
. $scripts/build-autogen-5-18-16

build=`get_build_triple $arch`

if [ "X$prefix" = "X" ]; then
  prefix="/opt/iains/$build/gcc-build-tools"
fi

# Several configure scripts fail to pass -m32 (or any other -arch or -target
# flag) to clang when the target is 32b so we need to roll our own

if [ "X$arch" = "X" ]; then
  arch=get_kernel_arch
fi

is32_bit=0
case $arch in
  i?86 | powerpc | ppc) is32_bit=1 ;;
  *) ;;
esac

# If the user did not specify a compiler, use clang on systems > 10.8.

kernmaj=`uname -r | sed -e 's,\.[0-9.]*,,'`
if [ "X$compiler" = "X" ]; then
  if [ $kernmaj -lt 13 ]; then
    cc=$build-gcc
    cxx=$build-g++
  else
    cc="clang"
    cxx="clang++"
  fi
else
  case $compiler in
    gcc | g\+\+)
      cc=gcc
      cxx=g++
      ;;
    gcc-4.2 | g\+\+-4.2)
      cc=gcc-4.2
      cxx=g++-4.2
      ;;
    *-gcc | *-g\+\+)
      b=`echo $compiler | sed -e s/-g..$//`
      cc=$b-gcc
      cxx=$b-g++
      ;;
    clang*)
      cc="clang"
      cxx="clang++"
      ;;
  esac
fi

if [ $is32_bit -ne 0 ]; then
  cc="$cc -m32"
  cxx="$cxx -m32"
else
  cc="$cc -m64 "
  cxx="$cxx -m64 "
fi

echo "Installing to : $prefix, using $cc as the compiler"
export PATH=$prefix/bin:$PATH
export PKG_CONFIG_PATH=$prefix/lib/pkgconfig

# set the job count, if not specified.  This will use all the cores on the
# older minis.
if [ "X$num_jobs" = "X" ]; then
  num_jobs=`sysctl -n hw.activecpu`
  if [ $num_jobs -gt 10 ]; then
    # On the servers, only use half the CPUs
    num_jobs=`expr $num_jobs / 2`
  elif [ $num_jobs -gt 6 ]; then
    # otherwise, leave a little CPU for other work if there's enough
    num_jobs=`expr $num_jobs - 2`
  fi
fi

# iconv is needed from Sonoma ... but just keep the recipe consistent.
configure_libiconv $oss_source $prefix $build "$cc" "$cxx" 
if [ $? -ne 0 ]; then
  exit 1
fi
build_libiconv $num_jobs
if [ $? -ne 0 ]; then
  exit 1
fi
install_libiconv
if [ $? -ne 0 ]; then
  exit 1
fi

# libunistring - needs iconv.
configure_libunistring $oss_source $prefix $build "$cc" "$cxx"
if [ $? -ne 0 ]; then
  exit 1
fi
build_libunistring $num_jobs
if [ $? -ne 0 ]; then
  exit 1
fi
install_libunistring
if [ $? -ne 0 ]; then
  exit 1
fi

# gettext 0.22.5 is known to work (0.24 does not).
configure_gettext $oss_source $prefix $build "$cc" "$cxx" 0.22.5
if [ $? -ne 0 ]; then
  exit 1
fi
build_gettext $num_jobs
if [ $? -ne 0 ]; then
  exit 1
fi
install_gettext
if [ $? -ne 0 ]; then
  exit 1
fi

# m4-1.4.19
configure_m4 $oss_source $prefix $build "$cc" "$cxx"
if [ $? -ne 0 ]; then
  exit 1
fi
build_m4 $num_jobs
if [ $? -ne 0 ]; then
  exit 1
fi
install_m4
if [ $? -ne 0 ]; then
  exit 1
fi

# autoconf-2.69
configure_autoconf $oss_source $prefix $build "$cc" "$cxx"
if [ $? -ne 0 ]; then
  exit 1
fi
build_autoconf $num_jobs
if [ $? -ne 0 ]; then
  exit 1
fi
install_autoconf
if [ $? -ne 0 ]; then
  exit 1
fi

# automake-1.15.1
configure_automake $oss_source $prefix $build "$cc" "$cxx"
if [ $? -ne 0 ]; then
  exit 1
fi
build_automake $num_jobs
if [ $? -ne 0 ]; then
  exit 1
fi
install_automake
if [ $? -ne 0 ]; then
  exit 1
fi

# gperf-3.1
configure_gperf $oss_source $prefix $build "$cc" "$cxx"
if [ $? -ne 0 ]; then
  exit 1
fi
build_gperf $num_jobs
if [ $? -ne 0 ]; then
  exit 1
fi
install_gperf
if [ $? -ne 0 ]; then
  exit 1
fi

# texinfo
configure_texinfo $oss_source $prefix $build "$cc" "$cxx"
if [ $? -ne 0 ]; then
  exit 1
fi
build_texinfo $num_jobs
if [ $? -ne 0 ]; then
  exit 1
fi
install_texinfo
if [ $? -ne 0 ]; then
  exit 1
fi

# tcl
configure_tcl $oss_source $prefix $build "$cc" "$cxx"
if [ $? -ne 0 ]; then
  exit 1
fi
build_tcl $num_jobs
if [ $? -ne 0 ]; then
  exit 1
fi
install_tcl
if [ $? -ne 0 ]; then
  exit 1
fi

# expect
configure_darwin_expect $oss_source $prefix $build "$cc" "$cxx"
if [ $? -ne 0 ]; then
  exit 1
fi
build_darwin_expect $num_jobs
if [ $? -ne 0 ]; then
  exit 1
fi
install_darwin_expect
if [ $? -ne 0 ]; then
  exit 1
fi

# dejagnu
configure_dejagnu $oss_source $prefix $build "$cc" "$cxx"
if [ $? -ne 0 ]; then
  exit 1
fi
build_dejagnu $num_jobs
if [ $? -ne 0 ]; then
  exit 1
fi
install_dejagnu
if [ $? -ne 0 ]; then
  exit 1
fi

# autogen is more complex - delegate to a larger script.
build_autogen $oss_source $prefix $build "$cc" "$cxx" $num_jobs $kernmaj $is32_bit



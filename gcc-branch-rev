#! /bin/sh

scripts=`dirname $0`

. $scripts/paths
. $scripts/scripts-version
. $scripts/build-utils
. $scripts/find-a-git

kernmaj=`uname -r | sed -e 's,\.[0-9.]*,,'`
hw64b=`sysctl -n hw.cpu64bit_capable`

# figure out the build machine.
arch=`get_build_arch`
build=`get_build_triple`
echo "build system is $build"

# Find a usable git.
git=`find_usable_git $build $kernmaj`

gv=`$git --version`
if [ $? -ne 0 ];then
 echo "cannot execute $git" >&2
 exit 1
fi
#echo "using git : $git [version $gv]"

#branch=`git name-rev --name-only HEAD || :`
branch=`$git rev-parse --abbrev-ref HEAD`
if [ $? -ne 0 ]; then
  echo "Failed to find the branch name" >&2
  exit 1
fi

revision=`$git describe --all --abbrev=12 --match \
         'basepoints/gcc-[0-9]*' HEAD | \
         sed -e 's,tags/,,' -e 's,basepoints/gcc-,r,'`
if [ $? -ne 0 ]; then
  echo "Failed to find the branch revision" >&2
  exit 1
fi

rm -f LAST_UPDATED gcc/REVISION
{
    date
    lastcommit=`TZ=UTC0 $git show --quiet --date='format-local:%a %d %b %Y %H:%M:%S UTC' --format="%cd"`
    echo "$lastcommit (revision $revision)"
} > LAST_UPDATED
echo "[$branch revision $revision]" > gcc/REVISION
echo `tail gcc/REVISION `

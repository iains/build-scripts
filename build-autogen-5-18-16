# Args : sources_dir, prefix, build-triple, CC, CXX, jobs, kernmaj is32b

# We have to build both deps of autogen and some tools that the build needs.

build_autogen ()
{
  # This is a much more complex build, let's make sure we specify everything.
  if [ $# -lt 8 ]; then
    echo "build-autogen : missing parameter(s)." >&2
    return 2
  fi

  mkdir -p "autogen-5-18-16"
  pushd "autogen-5-18-16" >/dev/null
  mkdir -p "autogen-build"

  # Place to put tools and deps that we do not install.
  temp_build_path=`pwd`/autogen-build
  PATH=$temp_build_path/bin:$PATH
  export PATH
  PKG_CONFIG_PATH=$temp_build_path/lib/pkgconfig:$PKG_CONFIG_PATH
  export PKG_CONFIG_PATH

  # Punt on NLS for autogen on 10.8 and earlier, there's some configury issue with
  # libintl.
  nls=
  if [ $7 -le 12 ]; then
    nls=--disable-nls
  fi

  iconvpfx=
  # iconv is needed from Sonoma ... but just keep behaviour consistent.
  configure_libiconv $1 $temp_build_path $3 "$4" "$5"
  if [ $? -ne 0 ]; then
    exit 1
  fi
  build_libiconv $6
  if [ $? -ne 0 ]; then
    exit 1
  fi
  install_libiconv
  if [ $? -ne 0 ]; then
    exit 1
  fi
  iconvpfx="--with-libiconv-prefix=$temp_build_path"

  # libunistring ...
  configure_libunistring $1 $temp_build_path $3 "$4" "$5"
  if [ $? -ne 0 ]; then
    exit 1
  fi
  build_libunistring $6
  if [ $? -ne 0 ]; then
    exit 1
  fi
  install_libunistring
  if [ $? -ne 0 ]; then
    exit 1
  fi

  if [ $7 -gt 12 ]; then
    configure_gettext $1 $temp_build_path $3 "$4" "$5" 0.22.5
    if [ $? -ne 0 ]; then
      exit 1
    fi
    build_gettext $6
    if [ $? -ne 0 ]; then
      exit 1
    fi
    install_gettext
    if [ $? -ne 0 ]; then
      exit 1
    fi
  fi

  # We need a gnu sed ...
  tar xf $1/sed-4.9.tar.gz
  mkdir  -p "sed-bld"
  pushd "sed-bld" >/dev/null
  config_cmd="../sed-4.9/configure --prefix=$temp_build_path $nls $iconvpfx --build=$3 "
  echo "configuring: $config_cmd CC=$4 CXX=$5"
  $config_cmd CC="$4" CXX="$5" >conf.txt
  if [ $? -ne 0 ]; then
    echo "sed configure failed" >&2
    popd >/dev/null
    return 2
  fi
  make -j $6 >bld.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "sed build failed" >&2
    popd >/dev/null
    return 2
  fi
  make install >ins.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "sed install failed" >&2
    popd >/dev/null
    return 2
  fi
  popd >/dev/null

  # We need pkgconf/pkg-config
  tar xf $1/pkg-config-0.29.2.tar.gz
  mkdir -p "pkg-config-bld"
  pushd "pkg-config-bld" >/dev/null
  cflags=
  if [ "$4" != "gcc-4.2" ]; then
    cflags="CFLAGS=-Wno-error=int-conversion"
  fi
  config_cmd="../pkg-config-0.29.2/configure --prefix=$temp_build_path --disable-shared --with-pic --build=$3  $nls --with-internal-glib $cflags"
  echo "configuring: $config_cmd CC=$4 CXX=$5"
  $config_cmd CC="$4" CXX="$5" >conf.txt
  if [ $? -ne 0 ]; then
    echo "pkgconf configure failed" >&2
    popd >/dev/null
    return 2
  fi
  make -j $6 >bld.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "pkgconf build failed" >&2
    popd >/dev/null
    return 2
  fi
  make install >ins.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "pkgconf install failed" >&2
    popd >/dev/null
    return 2
  fi
  popd >/dev/null

  # We need libltdl
  tar xf $1/libtool-2.5.4.tar.gz
  mkdir  -p "libtool-bld"
  pushd "libtool-bld" >/dev/null
  config_cmd="../libtool-2.5.4/configure --prefix=$temp_build_path --with-pic --disable-shared --build=$3"
  echo "configuring: $config_cmd CC=$4 CXX=$5"
  $config_cmd CC="$4" CXX="$5" >conf.txt
  if [ $? -ne 0 ]; then
    echo "libtool configure failed" >&2
    popd >/dev/null
    return 2
  fi
  make -j $6 >bld.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "libtool build failed" >&2
    popd >/dev/null
    return 2
  fi
  make install >ins.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "libtool install failed" >&2
    popd >/dev/null
    return 2
  fi
  popd >/dev/null

  ffi_include="LIBFFI_CFLAGS=-I/usr/include/ffi"
  ffi_lib="LIBFFI_LIBS=-lffi"
  if [ $7 -lt 19 ]; then
    # For earlier macOS the system ffi is not sufficient
    tar xf $1/libffi-3.4.7.tar.gz
    mkdir  -p "libffi-bld"
    pushd "libffi-bld" >/dev/null
    config_cmd="../libffi-3.4.7/configure --prefix=$temp_build_path --with-pic --disable-shared --build=$3"
    echo "configuring: $config_cmd CC=$4 CXX=$5"
    $config_cmd CC="$4" CXX="$5" >conf.txt
    if [ $? -ne 0 ]; then
      echo "libffi configure failed" >&2
      popd >/dev/null
      return 2
    fi
    make -j $6 >bld.txt 2>&1
    if [ $? -ne 0 ]; then
      echo "libffi build failed" >&2
      popd >/dev/null
      return 2
    fi
    make install >ins.txt 2>&1
    if [ $? -ne 0 ]; then
      echo "libffi install failed" >&2
      popd >/dev/null
      return 2
    fi
    popd >/dev/null
    ffi_include=
    ffi_lib=
  fi

  # We need libgmp
  tar xf $1/gmp-6.3.0.tar.gz
  mkdir  -p "gmp-bld"
  pushd "gmp-bld" >/dev/null
  config_cmd="../gmp-6.3.0/configure --prefix=$temp_build_path --with-pic --disable-shared --build=$3"
  echo "configuring: $config_cmd CC=$4 CXX=$5"
  $config_cmd CC="$4" CXX="$5" >conf.txt
  if [ $? -ne 0 ]; then
    echo "gmp configure failed" >&2
    popd >/dev/null
    return 2
  fi
  make -j $6 >bld.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "gmp build failed" >&2
    popd >/dev/null
    return 2
  fi
  make install >ins.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "gmp install failed" >&2
    popd >/dev/null
    return 2
  fi
  popd >/dev/null

  # We need bdw-gc
  tar xf $1/gc-8.2.8.tar.gz
  if [ $7 -lt 11 ]; then
    pushd gc-8.2.8 >/dev/null
    tar xf $1/libatomic_ops-7.8.2.tar.gz
    ln -s libatomic_ops-7.8.2 libatomic_ops
    popd >/dev/null
  fi
  mkdir  -p "gc-bld"
  pushd "gc-bld" >/dev/null
  config_cmd="../gc-8.2.8/configure --prefix=$temp_build_path --with-pic --disable-shared --enable-threads=pthreads --build=$3  $nls $iconvpfx"
  echo "configuring: $config_cmd CC=$4 CXX=$5"
  $config_cmd CC="$4" CXX="$5" >conf.txt
  if [ $? -ne 0 ]; then
    echo "bdw-gc configure failed" >&2
    popd >/dev/null
    return 2
  fi
  make -j $6 >bld.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "bdw-gc  build failed" >&2
    popd >/dev/null
    return 2
  fi
  make install >ins.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "bdw-gc install failed" >&2
    popd >/dev/null
    return 2
  fi
  popd >/dev/null

  # We need mktemp from coreutils
  core_utils_vers=9.6
  gmp_prefix=--with-libgmp-prefix=$temp_build_path
  no_y2038=
  if [ $8 -ne 0 ]; then
    no_y2038=--disable-year2038
  fi
  if [ $7 -lt 10 ]; then
     case $3 in
      x86_64* | i686*)
        core_utils_vers=8.32
        # Not supported by 8.32
        no_y2038=
        gmp_prefix=--without-gmp
        ;;
      *);;
     esac
  fi
  tar xf $1/coreutils-$core_utils_vers.tar.gz
  mkdir  -p "coreutils-bld"
  pushd "coreutils-bld" >/dev/null
  config_cmd="../coreutils-$core_utils_vers/configure --prefix=$temp_build_path --build=$3 --program-prefix=gnu- $nls $iconvpfx $gmp_prefix $no_y2038"
  echo "configuring: $config_cmd CC=$4 CXX=$5"
  $config_cmd CC="$4" CXX="$5" >conf.txt
  if [ $? -ne 0 ]; then
    echo "coreutils configure failed" >&2
    popd >/dev/null
    return 2
  fi
  make -j $6 >bld.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "coreutils build failed" >&2
    popd >/dev/null
    return 2
  fi
  make install >ins.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "coreutils install failed" >&2
    popd >/dev/null
    return 2
  fi
  popd >/dev/null
  pushd $temp_build_path/bin >/dev/null
  ln -f gnu-mktemp mktemp
  popd >/dev/null

  # We need guile
  guile_vers=2.2.7-p
  case $3 in
    powerpc*) guile_vers=2.0.14;;
    *);;
  esac
  tar xf $1/guile-$guile_vers.tar.gz
  mkdir  -p "guile-bld"
  pushd "guile-bld" >/dev/null
  config_cmd="../guile-$guile_vers/configure --prefix=$temp_build_path --build=$3 --disable-shared $ffi_include $ffi_lib LDFLAGS=-Wl,-framework,CoreFoundation --disable-silent-rules $nls $iconvpfx"
  echo "configuring: $config_cmd CC=$4 CXX=$5"
  $config_cmd CC="$4" CXX="$5" >conf.txt
  if [ $? -ne 0 ]; then
    echo "guile configure failed" >&2
    popd >/dev/null
    return 2
  fi
  make -j $6 >bld.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "guile build failed" >&2
    popd >/dev/null
    return 2
  fi
  make install >ins.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "guile install failed" >&2
    popd >/dev/null
    return 2
  fi
  popd >/dev/null

  # Now do the build
  tar xf $1/autogen-5.18.16p.tar.gz
  mkdir  -p "autogen-5-18-16"
  pushd "autogen-5-18-16" >/dev/null
  config_cmd="../autogen-5.18.16-p/configure --prefix=$2 --build=$3 ac_cv_func_utimensat=no --disable-shared --disable-dependency-tracking --enable-static-autogen $nls LDFLAGS=-Wl,-framework,CoreFoundation "
  echo "configuring: $config_cmd CC=$4 CXX=$5 CFLAGS="-g -O2 -fcommon""
  $config_cmd CC="$4" CXX="$5" CFLAGS="-g -O2 -fcommon" >conf.txt
  if [ $? -ne 0 ]; then
    echo "autogen configure failed" >&2
    popd >/dev/null
    return 2
  fi
  make -j $6 >bld.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "autogen build failed" >&2
    popd >/dev/null
    return 2
  fi
  make install >ins.txt 2>&1
  if [ $? -ne 0 ]; then
    echo "autogen install failed" >&2
    popd >/dev/null
    return 2
  fi
  popd >/dev/null
}

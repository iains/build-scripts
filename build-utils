
get_darwin_vers()
{
  kernname=`uname -s | tr '[:upper:]' '[:lower:]'`
  if [ $kernname != "darwin" ]; then
    echo "not a Darwin system?" >&2
    return 2
  fi
  kernmaj=`uname -r | sed -e 's,\.[0-9.]*,,'`
  echo "$kernname$kernmaj"
}

get_kernel_arch()
{
  # Amend for cases that we build with a different arch name from the
  # one reported by the OS.
  karch=`uname -m`
  case $karch in
    arm64)
      karch="aarch64" ;;
    i386)
      karch="i686" ;;
  esac
  echo "$karch"
}

get_build_arch()
{
  arch=`get_kernel_arch`
  case $kernarch in
    i386)
       if [ $kernmaj -ge 10 -a $hw64b = 1 ];then
         arch="x86_64"
       else
         arch="i686"
       fi
       ;;
    *)
       ;;
  esac
  echo "$arch"
}

# One, optional, parm - an override arch.
get_build_triple()
{
  arch=`get_build_arch`
  darwinN=`get_darwin_vers`

  # allow for override of the arch.
  if [ $# -gt 0 ]; then
    arch=$1
    if [ $arch = "arm64" ]; then
      arch="aarch64"
    fi
  fi

  echo "$arch-apple-$darwinN"
}

# Pick a job count; this will use all the cores on the older minis.
get_job_count()
{
  num_jobs=`sysctl -n hw.activecpu`
  # If we do not have many cores, use all of them - otherwise some heuristics
  # to share resources...
  if [ $num_jobs -gt 10 ]; then
    # On the bigger machines, only use half the CPUs
    num_jobs=`expr $num_jobs / 2`
  elif [ $num_jobs -gt 6 ]; then
    # otherwise, leave a little CPU for other work if there's enough
    num_jobs=`expr $num_jobs - 2`
  fi
  echo "$num_jobs"
}

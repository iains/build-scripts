#! /bin/sh

# This assumes a configure with the target triple specified like
# <arch>-apple-darwinNN

# We can process:
#  * Native bootstrap.
#  * Rosetta bootstrap.
#  * Cross-compilers with dummy/remote testing.

# Allow pushing to a local db.
# and default to this.

gitpushurl='home:/repos/test-results.git'
do_local=1
do_bunsen=0
jfdi=0
tagid=

while [ $# -gt 0 ]
do
  case $1 in
    --force | -f)
      jfdi=1
      ;;
    --tag*)
       tagid=$2
       shift
       ;;
    --help | -h)
      echo "$0 --force/-f : re-send / force sending to a second repo"
      echo "$0 --tagid    : specify the tag ID for this build"
      exit 0
      ;;
  esac
  shift
done

# Locate the source directory (we could also look in config.status or
# config.log, I guess).

if [ -f "gcc/Makefile" -a -f "Makefile" ]; then
  srcdir=`grep VPATH= Makefile | sed -e 's,VPATH=,,'`
else
  echo "This does not seem to be a GCC build directory" >&2
  exit 1
fi

# Figure out some info for the tag and to locate the runtime builds.
machine=`uname -m`
target=`grep target= gcc/Makefile | head -1 | sed -e 's,target=,,'`
host=`grep host= gcc/Makefile | head -1 | sed -e 's,host=,,'`
build=`grep build= gcc/Makefile | head -1 | sed -e 's,build=,,'`
arch=`echo $target | sed -e 's,-.*,,'`
darwin=`echo $target | sed -e 's,.*-.*-,,' | sed -e 's,\.[0-9.]*,,'`

rosetta=
cross=false
if test $host != $target; then
cross=true
else
  # Look for Rosetta bootstraps on Arm64 and X86.
  if test "X$arch" = "Xx86_64"; then
    ver=`uname -v | grep -i arm64`
    if test "X$ver" != "X"; then
      rosetta='-rosetta'
    fi
  elif test "X$arch" = "Xpowerpc"; then
    ver=`uname -v | grep -i I386`
    if test "X$ver" != "X"; then
      rosetta='-rosetta'
    fi
  fi
fi

# Find a usable git.
if [ -x /opt/iains/$build/gcc-7-5-toolchain/bin/git ];then
  # We have a toolchain for this OS version.
  tcgit=/opt/iains/$build/gcc-7-5-toolchain/bin/git
elif [ -x /opt/iains/x86_64-apple-darwin19/gcc-7-5-toolchain/bin/git ];then
  # We can use the Darwin19 one, for now.
  tcgit=/opt/iains/x86_64-apple-darwin19/gcc-7-5-toolchain/bin/git
fi

# Let the environment override the git to be used; fall back to whatever we
# find in PATH if there's no toolchain version available.
git=${GIT-${tcgit-git}}

gv=`$git --version`
if [ $? -ne 0 ];then
 echo "cannot execute $git" >&2
 exit 1
fi
echo "using git : $git [version $gv]"

# We need to check for $build tools capability on older OS.
kernmaj=`uname -r | sed -e 's,\.[0-9.]*,,'`

# Hopefully, we configured with --build=<arch>-apple-darwinNN, if not, then
# we're not sure how to name the triple.

if [ ! -d "$target" ]; then
  echo "Not sure what the target name is, giving up." >&2
  exit 1
fi

branch=`cd $srcdir && $git rev-parse --abbrev-ref HEAD`
headsha=`cd $srcdir && $git rev-parse HEAD`

revision=`cd $srcdir && $git describe --all --abbrev=12 --match \
         'basepoints/gcc-[0-9]*' HEAD | \
         sed -e 's,tags/,,' -e 's,basepoints/gcc-,r,' `

branchrev=`echo $revision | sed -e 's,-g[0-9a-fA-F]*,,'`
gccvers=`echo $branchrev | sed -e 's,-.*,,'`
commit=`echo $branchrev | sed -e 's,r[0-9][0-9]*-,,'`

branchname=`echo gcc-$gccvers`
case $branch in
  master) ;;
  releases/gcc-*) ;;
  *)
    branchname="$branch"
    if test X$tagid != X; then
      branchrev="$branch-$tagid"
    else
      branchrev=`echo $branchrev | sed -e s,$gccvers,$branch,`
    fi
    ;;
esac

# Figure out the effective upstream; When we are on the main machine, then the
# upstream is the GCC repo.  When we are on test boxes, and the upstream is
# repos and the branch is master or releases/gcc-nn, then the effective
# upstream is also the GCC repo.  Otherwise, it's a local repo and might have
# unpublished patches.

srcrepo=`cd $srcdir && $git rev-parse --abbrev-ref $branch@{upstream} | sed -e s,/.*,, `
if [ $srcrepo = "upstream" ]; then
  srcrepo='gcc.gnu.org/git/gcc.git'
elif [ $srcrepo = "repos" ]; then
  case $branch in
    releases/gcc-* | master)
      srcrepo='gcc.gnu.org/git/gcc.git'
      ;;
    *)
      srcrepo=`cd $srcdir && $git config --get remote.$srcrepo.url`
      ;;
  esac
else
  srcrepo=`cd $srcdir && $git config --get remote.$srcrepo.url`
fi

# We really want the build time not the reporting time .. but that might
# be hard to arrange on some OS versions.
build_date=`if [ -f build_date.txt ]; then cat build_date.txt; \
            elif date -ur gcc/cc1plus '+%y%m%d-%H%M' 2>/dev/null; then :; \
            else date -u '+%y%m%d-%H%M' 2>/dev/null; \
            fi`
            
stamp="$commit-$build_date"
if test X$tagid != X; then
  stamp="$tagid"
fi

shorthost=`echo $host | sed -e 's,apple-,,'`
testsbranch=
if $cross; then
  if test X$tagid != X; then
    tagname=`echo iains/$branchname/$shorthost-X-$arch$rosetta-$darwin/$tagid`
  else
    tagname=`echo iains/$branchname/$shorthost-X-$arch$rosetta-$darwin/$stamp`
  fi
  testsbranch="$branchname/$shorthost-X-$arch$rosetta-$darwin"
else
  if test X$tagid != X; then
    tagname=`echo iains/$branchname/$arch$rosetta-$darwin/$tagid`
  else
    tagname=`echo iains/$branchname/$arch$rosetta-$darwin/$stamp`
  fi
  testsbranch="$branchname/$arch$rosetta-$darwin"
fi

echo upstream=$srcrepo test_data_repo=$gitpushurl tag=$tagname 

# Staging for our output.
staging=`echo bunsen-$branchrev`
if [ -d $staging ]; then
  if [ -f $staging/results-sent -a $jfdi -eq 0 ]; then
    echo "results already sent; --force/-f to repeat (at your risk)."
    exit 0;
  fi
  rm -fr $staging
fi

# Find the branch with our test data.
nohistory=
$git ls-remote -q --heads --exit-code $gitpushurl refs/heads/$testsbranch >/dev/null
if [ $? -ne 0 ]; then
  echo "not yet implemented the no history version" >&2
  exit 1
  $git clone -q --shared $gitpushurl $staging  
  nohistory=1
else
  $git clone -q --depth 1 $gitpushurl -b $testsbranch $staging
  nohistory=0
fi

# get the repo
if [ $? -ne 0 ]; then
  echo "failed to clone from $gitpushurl" >&2
fi

if [ ! -d $staging ]; then
  echo "failed to get a checkout in $staging" >&2
  exit 1
fi

# First see if we can figure out regressions.
for s in gcc g++ fortran objc obj-c++ gnat gdc gm2; do
  if [ -f gcc/testsuite/$s/$s.sum -a -f $staging/gcc/testsuite/$s/$s.sum ]; then
    $srcdir/contrib/compare_tests $staging/gcc/testsuite/$s/$s.sum gcc/testsuite/$s/$s.sum > test-$s.diff
    # If this fails - notify.
    if [ $? != 0 ]; then
      echo "Changes seen in $s tests" >&2
    fi
  fi
done
if [ -f gcc/testsuite/ada/acats/acats.sum -a -f $staging/gcc/testsuite/ada/acats/acats.sum ]; then
  $srcdir/contrib/compare_tests $staging/gcc/testsuite/ada/acats/acats.sum gcc/testsuite/ada/acats/acats.sum > test-acats.diff
  # If this fails - notify.
  if [ $? != 0 ]; then
    echo "Changes seen in Acats tests" >&2
  fi
fi
for l in libatomic libstdc++-v3 libphobos libitm libgomp; do
  if [ -f $target/$l/testsuite/$l.sum -a -f $staging/$target/$l/testsuite/$l.sum ]; then
    $srcdir/contrib/compare_tests $staging/$target/$l/testsuite/$l.sum $target/$l/testsuite/$l.sum > test-$l.diff
    # If this fails - notify.
    if [ $? != 0 ]; then
      echo "Changes seen in $l tests" >&2
    fi
  fi
done

# Remove the last data...
rm -r $staging/* $staging/.bunsen*

# now copy in the new....
# some metadata

echo $headsha > $staging/.bunsen.source.gitname
echo $branch > $staging/.bunsen.source.gitbranch
echo "gcc-$revision" > $staging/.bunsen.source.gitdescribe
echo $srcrepo > $staging/.bunsen.source.gitrepo

# Do the top level specially.
if [ -f "summ.txt" ]; then
  # This is how I name saved sum files
  if $cross; then
    sumfile=`echo summ-$shorthost-X-$arch-$darwin-$branchrev$rosetta.txt`
  else
    sumfile=`echo summ-$arch-$darwin-$branchrev$rosetta.txt`
  fi
  cp summ.txt "$staging/$sumfile"

  # Save a local copy to send to testresults@
  if [ -d /source/ -a ! -f "/source/$sumfile" ]; then
    cp summ.txt "/source/$sumfile"
  fi
else
  echo "warning: no summ.txt found, probably not what was intended" >&2
fi

cp config.log $staging/
cp {config,build,test}_stats.txt $staging/

# Carefully avoid finding all .log files, there are a bunch of irrelevant ones
# when testing acats.

# Find all the config.log

# optional in-source builds
extras=
for e in gmp mpfr mpc isl gettext zlib intl c++tools; do
  if [ -d $e ]; then
    extras="$extras $e"
  fi
done

# Find all the .sum files, checking what $build supports for cpio
if test "x$kernmaj" = "x9"; then
  # cpio on Darwin < 10 does not support --quiet.
  quiet=
else
  quiet='--quiet'
fi

res=`find gcc lib* $target/* fixincludes gnat* $extras -name config.log | cpio $quiet -pLd $staging/  >/dev/null`
if test "X$res" != "X"; then
  echo "failed to copy config.logs"
  exit 1
fi

summfiles=`find . -name \*.sum`
res=`for f in $summfiles; do echo $f; done | cpio $quiet -pLd $staging/  >/dev/null`
if test "X$res" != "X"; then
  echo "failed to copy .sum files"
  exit 1
fi

# Find all the .log files, that have a corresponding .sum
res=`for f in $summfiles; do echo $f; done | sed -e 's,sum,log,' | cpio $quiet -pLd $staging/  >/dev/null`
if test "X$res" != "X"; then
  echo "failed to copy .log files"
  exit 1
fi

# .. and some other specials (relying on gcc/ being present now).
cp $srcdir/gcc/REVISION $staging/gcc/

pushd "$staging" >/dev/null

# Here we should be able to analyze the diffs (jit is quite noisy).
#for s in gcc g++ fortran objc obj-c++ gnat gdc gm2; do
#  if [ -f gcc/testsuite/$s/$s.sum ]; then
#    fail=0
#    $git diff -U1 -w -- gcc/testsuite/$s/$s.sum | grep -E -e '^(-|\+)X?(FAIL|PASS|UNSUPPORTED)' > ../test-$s.diff
#    grep -q -E -e '-PASS' ../test-$s.diff
#    # If this succeeds, we have regressions.
#    if [ $? = 0 ]; then
#      echo "Regressions seen in $s tests" >&2
#    fi
#  fi
#done
#if [ -f gcc/testsuite/ada/acats/acats.sum ]; then
#  $git diff -U1 -w -- gcc/testsuite/ada/acats/acats.sum | grep -E -e '^(-|\+)X?(FAIL|PASS|UNSUPPORTED)' > ../test-acats.diff
#  grep -q -E -e '-PASS' ../test-$s.diff
#  if [ $? = 0 ]; then
#    echo "Regressions seen in acats tests" >&2
#  fi
#fi
#for l in libatomic libstdc++-v3 libphobos libitm libgomp; do
#  if [ -f $target/$l/testsuite/$l.sum ]; then
#    $git diff -U1 -w -- $target/$l/testsuite/$l.sum | grep -E -e '^(-|\+)X?(FAIL|PASS|UNSUPPORTED)' > ../test-$l.diff
#    grep -q -E -e '-PASS' ../test-$l.diff 
#    if [ $? = 0 ]; then
#      echo "Regressions seen in $l tests" >&2
#    fi
#  fi
#done

$git add -A
$git commit -qm $branchrev
$git tag "$tagname"

$git push -q $gitpushurl $testsbranch 
if [ $? -ne 0 ]; then
  echo "failed to push $testsbranch to $gitpushurl" >&2
  exit 1
fi
$git push -q $gitpushurl $tagname 
if [ $? -ne 0 ]; then
  echo "failed to push $tagname to $gitpushurl" >&2
  exit 1
fi

echo "done: `$git show-ref $tagname`"
echo $stamp > results-sent

popd >/dev/null

exit 0

# ==== now pack it up and send it.

pushd "$staging" >/dev/null
git init -q
git add .
git commit -q -mupload
git tag "$tagname"
git remote add server "$gitpushurl"
# Push the commit to the server
git push -q server "$tagname":"$tagname" 
# Show the resulting commit & tag
git show-ref "$tagname"

echo $stamp > results-sent
popd >/dev/null

